(function() {
    /*global console*/
    var nop = function() {
    };
    var trackActivityStart = console.time ? console.time.bind(console) : nop;
    var trackActivityEnd = console.timeEnd ? console.timeEnd.bind(console) : nop;

    var ajax = function sendRequest(url, callback) {
        var request = new XMLHttpRequest();
        request.open('GET', url, true);
        request.onreadystatechange = function() {
            if (request.readyState != 4) {
                return;
            }
            if (request.status != 200 && request.status != 304) {
                callback('status code ' + request.status);
                return;
            }
            callback(null, request);
        };
        if (request.readyState == 4) {
            return;
        }
        request.send();
    };

    var findScriptBySrcPart = function(element, part) {
        return element.querySelector('script[src*="' + part + '"]');
    };

    var trimFileName = function(path) {
        return path.substr(0, path.lastIndexOf('/') + 1);
    };

    var parseHtml = function(html) {
        var element = document.createElement('html');
        element.innerHTML = html;
        return element;
    };

    var last = function(array) {
        return array[array.length - 1];
    };

    var throwMessage = function(message) {
        throw new Error(message);
    };

    var loaders = {
        css: function(path, attributes) {
            var link = document.createElement('link');
            attributes.forEach(function(attr) {
                link.setAttribute(attr.name, attr.value);
            });
            link.setAttribute('href', path);
            link.setAttribute('rel', 'stylesheet');
            link.setAttribute('type', 'text/css');
            return link;
        },
        js: function(path, attributes) {
            var script = document.createElement('script');
            attributes.forEach(function(attr) {
                script.setAttribute(attr.name, attr.value);
            });
            script.type = 'text/javascript';
            script.charset = 'utf-8';
            script.src = path;
            script.async = false;
            return script;
        }
    };

    var extractExtension = function(path) {
        var a = document.createElement('a');
        a.href = path;
        return last(a.pathname.split('.'));
    };

    var loadItem = function(item) {
        var path = item.path;
        var attributes = item.attributes;
        var activityName = 'load ' + path;
        trackActivityStart(activityName);

        var load = loaders[item.resourceType] || throwMessage('unknown resource type: ' + item.resourceType);
        var domItem = load(path, attributes);
        domItem.onload = function() {
            trackActivityEnd(activityName);
        };
        domItem.onerror = function() {
            if (item.kind === 'optional') {
                console.info('ignored optional dep load fail: ' + activityName);
            } else {
                console.error('failed: ' + activityName);
            }
        };
        document.querySelector('head').appendChild(domItem);
    };
    var toArray = function(smth) {
        return Array.prototype.slice.call(smth);
    };

    var isAbsoluteUrl = function(url) {
        return /^(https?:)?\/\//.test(url);
    };

    var bootstrapperScriptElement = findScriptBySrcPart(document, 'bootstrapper.js');
    var bootstrapperRelativePath = trimFileName(bootstrapperScriptElement.getAttribute('src'));
    var tpWebRelativePath = bootstrapperRelativePath + '../../../';
    var boardPageRelativePath = tpWebRelativePath + 'RestUI/';

    trackActivityStart('retrieve board.aspx');
    ajax(boardPageRelativePath + 'Board.aspx', function(err, data) {
        trackActivityEnd('retrieve board.aspx');

        if (err) {
            throw err;
        }

        trackActivityStart('bootstrapping and startup');

        var boardPage = parseHtml(data.response);

        var scripts = toArray(boardPage.querySelectorAll('script[data-kind]'))
            .map(function(el) {
                return {kind: el.getAttribute('data-kind'), path: el.getAttribute('src')};
            });
        var links = toArray(boardPage.querySelectorAll('link[data-kind]'))
            .map(function(el) {
                return {kind: el.getAttribute('data-kind'), path: el.getAttribute('href')};
            });
        var boardPageItems = scripts.concat(links);
        if (!boardPageItems.length) {
            throw new Error('Couldn\'t find any bundle script tag on loaded page. Maybe you are unauthorized?');
        }

        var publicPath = trimFileName(boardPageItems[0].path);
        var selfScriptElement = findScriptBySrcPart(document, 'bootstrapper.js');
        var requires = selfScriptElement.getAttribute('data-load').split('|')
            .map(function(fileName) {
                const optionalMatch = fileName.match(/^\[(.+)\]$/);
                if (optionalMatch) {
                    return {kind: 'optional', path: publicPath + last(optionalMatch)};
                } else {
                    return {kind: 'mustHave', path: publicPath + fileName};
                }
            });
        boardPageItems
            .concat(requires)
            .filter(function(x) {
                return x.kind !== 'entry' && x.kind !== 'style';
            })
            .map(function(item) {
                return {
                    kind: item.kind,
                    path: isAbsoluteUrl(item.path) ? item.path : boardPageRelativePath + item.path,
                    resourceType: extractExtension(item.path),
                    attributes: item.kind === 'boot' ? [{
                        name: 'data-tau-path',
                        value: bootstrapperScriptElement.getAttribute('data-use-tau-path')
                    }] : []
                };
            })
            .forEach(loadItem);
    });
})();
